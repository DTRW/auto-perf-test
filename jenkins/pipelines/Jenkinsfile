// These could also be passed as parameters
def testPlanPath = 'https://raw.githubusercontent.com/fgiloux/auto-perf-test/master/jmeter/openshift/apt-jmx-cm.yaml' 
def testPlanName = 'apt-jmx' 
pipeline {
  agent {
    node {
      label 'master' 
    }
  }
  // triggers {
    // Execute the pipeline once a day with automated distribution.
    // cron('H H * * *)
  //}
  options {
    timeout(time: 20, unit: 'MINUTES') 
  }
  stages {
    stage('preamble') {
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo "Using project: ${openshift.project()}"
                    }
                }
            }
        }
    }
    // The aim of this section is to make sure that the environment
    // has no left over. Delete and recreate provides confidence
    // and reproducibility.
    stage('cleanup') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  // Deactivated for making demos quicker
                  /* openshift.selector("all", [ 'app' : 'camel-amq-fakeapp' ]).delete() */
                  // Secrets need to be addressed separately
                  /* if (openshift.selector("secrets", secretName).exists()) { 
                    openshift.selector("secrets", secretName).delete()
                  } */
                  openshift.selector("all", [ "testplan" : testPlanName ]).delete()
                  openshift.selector("configMaps", [ "testplan" : testPlanName ]).delete()
                  /* openshift.selector("all", [ job-name : apt-jmeter ]).delete() */
                }
            }
        }
      }
    }
    // Template may be used to populate the environment
    // Not used here
    /* stage('create') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.newApp(templatePath) 
                }
            }
        }
      }
    } */
    // This stage is for building the application from git repository
    stage('build') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                    // Deactivated for making demos quicker
                    /* def builds = openshift.selector("bc", 'camel-amq-fakeapp-s2i').startBuild("--wait=true") */
                }
            }
        }
      }
    }
    // This stage is provisioning the environment with specifics
    // This may include credentials and configMaps with endpoint information
    // A new deployment is started if no image change trigger is configured
    // in the deployment configuration, only wait for deployment completion otherwise
    // Test plans and datsets to be run are also create here.
    stage('deploy') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                    // Credentials prepopulated in environment for security reason
                    // TODO: Create separate configMaps for
                    //         - test plan
                    //         - message template
                    //         - dataset
                    // In real life an scm plugin would be used.
                    // def testPlanCmSource = sh(returnStdout: true, script: "curl ${testPlanPath}")
                    def testPlanCm = openshift.create(testPlanPath).object()
                    testPlanCm.metadata.labels['testplan'] = testPlanName
                    openshift.apply(testPlanCm)
                    // Deactivated for making demos quicker
                    //         - TODO: Creation of configMap with application properties
                    /* def dc = openshift.selector("dc", 'camel-amq-fakeapp').rollout()
                    timeout(5) { 
                        openshift.selector("dc", 'camel-amq-fakeapp').related('pods').untilEach(1) {
                            return (it.object().status.phase == "Running")
                        }
                    } */
                    // Generate the performance report
                    // perfReport 'result.csv'
                }
            }
        }
      }
    }
    // This stage is for test execution
    stage('test') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                    echo "Starting tests"
                    // Test plan is configurable
                    // Environment variables can be passed to run the same test plan with different conditions:
                    // duration, number of messages sent, distribution parameters
                    def models = openshift.process("apt-jmeter-job", "-p", "JMX_CONFIGMAP=${testPlanName}")
                    // It is possible to modify the objects, mounting a JKS with credentials for a specic broker for instance
                    // Just adding a label here
                    for ( o in models ) {
                          o.metadata.labels['testplan'] = testPlanName
                    }
                    def created = openshift.create(models)
                    // TODO: to be replaced by a hook.
                    sleep(10)
                    def jmeterPod = openshift.selector('pod', ['testplan': testPlanName]).object()
                    // TODO:
                    // The name of the shared drive for the result is to be passed as param to the job
                    // Param to be added to the template and here. The build id could be used for the purpose
                    // The result is available on a shared drive to be mounted by Jenkins
                    //perfReport 'result.csv'
                    echo "Tests completed"
                }
            }
        }
      }
    }
    // After tests have been successfully executed the image may be tagged accordingly
    stage('tag') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.tag("camel-amq-fakeapp:latest", "camel-amq-fakeapp:staging") 
                }
            }
        }
      }
    }
  }
}

